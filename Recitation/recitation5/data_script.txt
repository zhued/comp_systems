$ make
... Compile using optimization and debugging flags enabled...

$ objdump --dissassemble datastructures-example > datastructures-example.dis
... Disassemble datastructures-example and store as datastructures-example.dis file,
    compare main in source...
... to main in assembly map functionality/fprintf statements...

$ gdb datastructures-example
... Start GDB running on datastructures-example...

(gdb) break pause
... Set a breakpoint right after the first fprintf statement ...

(gdb) display/i $pc
... Display the assembly instruction that'll happen next ...

(gdb) run
... Start execution in GDB of datastructures-example...

(gdb) p woof
... print the woof structure works because of the -g tag...

(gdb) p &woof
... print what woof points @...

(gdb) x/3wx &woof
... print 3 words in hex where woof points @... 

(gdb) p woof2
... print woof2 struture...

(gdb) x/3wx &woof2
... print 3 words in hex of woof2...

(gdb) x/12bx &woof
... print 12 bytes out of where woof points in hex...

(gdb) x/12b &woof2
... examine 12 bytes @ location pointed by woof2 in hex...

... <What is the memory location of the integer in woof & woof2>...
... <How are the structs aranged in memory? Why is this the case?>...
... <Why might this be useful in relation to your Bomb lab?>...

(gdb) c
... continue on to the arrays...
...breaks @ second pause after array initialization...

(gdb) p intArray
... print out intArray...

(gdb) x/10wx &intArray
...examine 10 words in hex @ intArray...
...<What is the memory location @ the 3rd element in intArray?>...

(gdb) p &intArray[3]
... check that the memory location predicted is correct...

(gdb) x/10wx &charIntChar
... look @ charIntChar's first 10 words in hex...
... <What is the address of the 3rd element in charIntChar?>...

(gdb) p &charIntChar[3]
... verify address of 3rd element by printing it out...

(gdb) c
... continue on to the linked list...
...breaks @ third pause after linked list has been built...

(gdb) p head
... prints the memory location of head...

(gdb) p *head
... prints the information @ head...

(gdb) x/4x head
... examine the 4 words of memory in hex contained in head...

...<Where does the 3rd element in the linked list reside?>...

(gdb) x/4x 0x0804a148
... look @ the information @ the pointer contained in head

(gdb) p head -> ptr
... print the address of the pointer in head...

(gdb) p *(head -> ptr)
... print the information @ the pointer in head...
... effectively look at the next element in the lists information...

... <Trace the list and show the 3rd element in the list>...

